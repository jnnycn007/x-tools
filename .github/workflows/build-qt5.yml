name: build-qt5
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: # Enables manually
  pull_request:
    branches:
      - master
    types: [opened, synchronize, reopened]
  # push:
  #   branches:
  #     - master
jobs:
  build-windows:
    name: Build with Qt5(windows)
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        version: [5.9.9, 5.10.1, 5.11.3, 5.12.12, 5.13.2, 5.14.2, 5.15.2]
        include:
          - version: 5.9.9
            arch: win64_msvc2017_64
          - version: 5.10.1
            arch: win64_msvc2017_64
          - version: 5.11.3
            arch: win64_msvc2017_64
          - version: 5.12.12
            arch: win64_msvc2017_64
          - version: 5.13.2
            arch: win64_msvc2017_64
          - version: 5.14.2
            arch: win64_msvc2017_64
          - version: 5.15.2
            arch: win64_msvc2019_64
    steps:
      - name: Pull code
        uses: actions/checkout@v4
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          dir: ${{ github.workspace }}
          version: ${{ matrix.version }}
          target: desktop
          arch: ${{ matrix.arch }}
          modules: 'qtcharts'
      - name: build-msvc
        shell: cmd
        run: |
          mkdir build
          cd build
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          cmake -DCMAKE_PREFIX_PATH='${{ github.workspace }}/Qt/${{ matrix.version }}/${{ matrix.arch }}' -DCMAKE_BUILD_TYPE=Release -G "Ninja" ../
          cmake --build . --target all --config Release
  build-linux:
    name: Build with Qt5(linux)
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        version: [5.9.9, 5.10.1, 5.11.3, 5.12.12, 5.13.2, 5.14.2, 5.15.2]
    steps:
      - name: Pull code
        uses: actions/checkout@v4
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          dir: ${{ github.workspace }}
          version: ${{ matrix.version }}
          target: desktop
          arch: 'gcc_64'
          modules: 'qtcharts'
      - name: install-dependencies
        run: |
          sudo apt-get install -y libxcb-xinerama0 libxcb-cursor-dev  libudev-dev libusb-dev libusb-1.0-0-dev
      - name: build-gcc
        run: |
          git fetch --tags
          cmake --version
          mkdir build
          cd build
          cmake -DCMAKE_PREFIX_PATH='${{ github.workspace }}/Qt/${{ matrix.version }}/gcc_64' -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles" ../
          cmake --build . --target xTools
          cmake --build . --target xTools_linux
  build-macos:
    name: Build with Qt5(macos)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14]
        version: [5.9.9, 5.10.1, 5.11.3, 5.12.12, 5.13.2, 5.14.2, 5.15.2]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: install qt
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          dir: ${{ github.workspace }}
          version: ${{ matrix.version }}
          target: 'desktop'
          arch: 'clang_64'
          host: 'mac'
          modules: 'qtcharts'
      - name: build-clang
        run: |
          # brew uninstall --force node
          # brew unlink unixodbc
          # brew install libiodbc
          mkdir -p /Applications/Postgres.app/Contents/Versions/14/lib
          ln -s /usr/local/Cellar/postgresql@14/14.10/lib/postgresql@14/libpq.5.14.dylib /Applications/Postgres.app/Contents/Versions/14/lib/libpq.5.dylib
          mkdir build
          cd build
          cmake -DCMAKE_PREFIX_PATH='${{ github.workspace }}/Qt/${{ matrix.version }}/clang_64' -DCMAKE_BUILD_TYPE=Release ../
          cmake --build . --target all
